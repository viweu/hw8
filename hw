import os
import json
phone_book = []
phone_book_file = "hw/phonebook.json" # Название и расположение файла записной книги в формате JSON
def show_menu():
    """
    функция отображает меню и возвращает выбор пользователя
    Returns:
        coise (int): возвращает пользовательский ответ 
    """
    print("\nВыберите необходимое действие:\n",
          "1. отобразить весь справочник\n",
          "2. найти абонента\n",
          "3. добавить абонента в справочник\n",
          "4. изменить абонента\n",
          "5. удалить абонента\n",
          "6. сохранить справочник в текстовом формате\n",
          "7. закончить работу"),
    choice = int(input())
    return choice
def show_search_menu():
    """
    функция отображает меню поиска
    
    Returns:
        search_mod (int): возвращает пользовательский ответ 
    """
    print("\nВыберите вариант поиска:\n",
          "1. поиск по имени\n",
          "2. поиск по фамилии\n",
          "3. поиск по телефону\n",
          "4. поиск по комментарию\n",
          "5. отмеить\n")
    search_mod = int(input())
    return search_mod
def load_phone_book(phone_book_file):
    """
    функция загружает данные из файла JSON
    Args:
        phone_book_file (str): строка с названием файла
    Returns:
        phone_book (list): спискок словарей контактов
    """
    with open(phone_book_file, "r") as f:
        return json.load(f)
def sort_data_by_name(data):
    """
    функция сортировки данных в алфовитном порядке
    сортирует сначала по фамилии, потом по имени
    Args:
        data (list): список словарей
    Returns: 
        sorted_data (list): отсортированнный список словарей
    """
    sorted_data = sorted(data, key=lambda x: (x["surname"], x["name"]))
    return sorted_data
def save_phone_book(phone_book, phone_book_file = "hw8/phonebook.json"):
    """
    функция сохраняет список контактов в файл JSON
    Args: 
        phone_book (list): список контактов
        phone_book_file (str) = "hw8/phonebook.json": строка с названием файла (значение по умолчанию)
    """
    phone_book = sort_data_by_name(phone_book)
    with open(phone_book_file, "w", encoding="utf-8") as f:
        json.dump(phone_book, f, indent=4, ensure_ascii=False)
    print("="*len("данные записной книги обновлены"))
    print("данные записной книги обновлены")
    print("="*len("данные записной книги обновлены"))
def show_contacts(contacts):
    """
    функция отображения контактов. 
    для корректного отображения опеределяет длину максимального эддемента в строке.
    
    Args:
        contacts (list): список словарей контактов
    """
    if contacts == None:
        os.system('cls||clear')
        print("по данному запросу нет контактов для отображения")
        return
    # вычисление ширины столбцов
    max_name_len = max(len(contact["name"]) for contact in contacts)
    max_surname_len = max(len(contact["surname"]) for contact in contacts)
    max_phone_len = max(len(contact["phone"]) for contact in contacts)
    max_description_len = max(len(contact["description"]) for contact in contacts)
    # вывод таблицы в консоль
    # вывод заголовка
    print("| {:<{}} | {:<{}} | {:<{}} | {:<{}} |".format("Фамилия", max_surname_len, "Имя", max_name_len, "Телефон", max_phone_len, "Описание", max_description_len))
    print("-" * (max_surname_len + max_name_len + max_phone_len + max_description_len + 13))
    # вывод контактов
    for contact in contacts:
        print("| {:<{}} | {:<{}} | {:<{}} | {:<{}} |".format(
            contact["surname"], max_surname_len, contact["name"], max_name_len, contact["phone"], max_phone_len, contact["description"], max_description_len
        ))
def find_contact(contacts):
    """ 
    функция для поиска абонента в телефонной книге
    Args:
        contacts (list): список контактов
    Returns:
        contact (list): список словарей с данными контактов
        None: если контакт не найден
    """
    if contacts == None: # проверка на пустое значение
        print("вы ввели некорректные данные, попробуйте еще раз")
    search_mod = show_search_menu() # меню поиска
    search_str = None
    data = []
    flag = True
    while flag:
    while True:
        if search_mod == 1:
            search_mod = "name"
            search_str = input("введите имя для поиска")
            flag = False
            search_str = input("введите имя для поиска: ")
            break
        elif search_mod==2:
            search_mod = "surname"
            search_str = input("введите фамилию для поиска")
            flag = False
            search_str = input("введите фамилию для поиска: ")
            break
        elif search_mod==3:
            search_mod = "phone"
            search_str = input("введите телефон для поиска")
            flag = False
            search_str = input("введите телефон для поиска: ")
            break
        elif search_mod==4:
            search_mod = "description"
            search_str = input("введите описание для поиска")
            flag = False
            search_str = input("введите описание для поиска: ")
            break
        elif search_mod==5:
            return None
        search_mod=show_search_menu()
            
    for contact in contacts: # поиск совпадения строк
        if search_str.lower() in contact[search_mod].lower():
            data.append(contact)
    if len(data) > 0: 
        return data
    return None
def add_contact(contacts):
    """
    функция добавления нового контакта
    Args:
        contacts (list): список контактов
    Returns:
        contacts (list): список контактов с добавленным в конец новым контактом
    """
    name = input("введите имя: ")
    surname = input("введите фамилию: ")
    phone = input("введите номер телефона: ")
    description = input("введите описание: ")
    new_contact = {"surname": surname, "name": name, "phone": phone, "description": description}
    contacts.append(new_contact)
    return contacts
def remove_contact(contacts, contact_to_del):
    """
    функция удаления контакта
    Args:
        contacts (list): список контактов
        contact_to_del (list): контакт для удаления
    Returns:
        contacts (list): список контактов без удаленного контакта
    """
    remove_index = None 
    if contact_to_del == None or len(contact_to_del) == 0:
        print("такого контакта не найдено")
        return
    elif len(contact_to_del) == 1:
        remove_index = 0
    else:
        show_contacts(contact_to_del)
        print("введите порядковый номер контакта для удаления")
        remove_index = int(input()) - 1
    contacts.remove(contact_to_del[remove_index])
    return contacts
def edit_contact(contacts):
    """
    функция редактирует контакт и возвращает обновленный список контактов
    Args:
        contacts (list): список контактов
    Returns:
        contacts (list): список контактов с обновленными данными
    """
    contact = find_contact(contacts)
    choice = None
    if contact is None:
        print("контакт не найден.")
        return
    elif len(contact) > 1:
        show_contacts(contact)
        print("введите номер контакта для изменения")
        choice = int(input()) - 1
    if choice != None and choice + 1 <= len(contact):
        contact = contact[choice]
    else:
        contact = contact[0]
    print("введите данные для обновления или нажмите Enter чтобы оставить как было:")
    name = input("имя: ") or contact["name"]
    surname = input("фамилия: ") or contact["surname"]
    phone = input("номер телефона: ") or contact["phone"]
    description = input("описание: ") or contact["description"]
    
    contact["surname"] = surname
    contact["name"] = name
    contact["phone"] = phone
    contact["description"] = description
    return contacts
def save_contacts_to_txt(contacts, file_name = "hw8/phone_book.txt"):
    """
    функция для сохранения контактов в файл txt
    Args:
        contacts (list)
        file_name  = "hw/phone_book.txt" (str): будущее название файла !!! разрешение .txt
    """
    if contacts == None:
        os.system('cls||clear')
        print("по данному запросу нет контактов для отображения")
        return
    # вычисление ширины столбцов
    max_name_len = max(len(contact["name"]) for contact in contacts)
    max_surname_len = max(len(contact["surname"]) for contact in contacts)
    max_phone_len = max(len(contact["phone"]) for contact in contacts)
    max_description_len = max(len(contact["description"]) for contact in contacts)
    # вывод таблицы в консоль
    with open(file_name, "w") as f:
        f.write("| {:<{}} | {:<{}} | {:<{}} | {:<{}} |\n".format("фамилия", max_surname_len, "имя", max_name_len, "телефон", max_phone_len, "описание", max_description_len))
        f.write("-" * (max_surname_len + max_name_len + max_phone_len + max_description_len + 13) + "\n")
        for contact in contacts:
            f.write("| {:<{}} | {:<{}} | {:<{}} | {:<{}} |\n".format(
                contact["surname"], max_surname_len, contact["name"], max_name_len, contact["phone"], max_phone_len, contact["description"], max_description_len
            ))
def work_with_phonebook(phone_book_file):
    """
    функция работы с записной книгой
    запускается при старте программы и выводит в консоль меню, благодаря которому происходит управление файлом записной книги
    Args:
        phone_book_file (str): назание файла записной книги JSON
    """
    # показываем меню и получаем ответ пользователя.
    choice = show_menu()
    #  читаем телефонный справочник из файла
    while (choice!=7):
        phone_book = load_phone_book(phone_book_file)
        if choice==1: # отобразить весь список
            os.system('cls||clear')
            show_contacts(phone_book)
        elif choice==2: # найти абонента
            os.system('cls||clear')
            show_contacts(find_contact(phone_book))
        elif choice==3: # добавить абонента в справочник
            os.system('cls||clear')
            add_contact(phone_book)
            save_phone_book(phone_book, phone_book_file)
        elif choice==4: # изменить абонента
            os.system('cls||clear')
            edit_contact(phone_book)
            save_phone_book(phone_book, phone_book_file)
        elif choice==5: # удалить абонента
            os.system('cls||clear')
            remove_contact(phone_book, find_contact(phone_book))
            save_phone_book(phone_book, phone_book_file)
        elif choice==6: # сохранить справочник в текстовом формате
            os.system('cls||clear')
            save_contacts_to_txt(phone_book)
        choice = show_menu()
    os.system('cls||clear')
    print("вы закончили работу с записной книгой")
work_with_phonebook(phone_book_file)
